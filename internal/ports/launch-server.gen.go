// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package ports

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List Kinds
	// (GET /kinds)
	ListKinds(ctx echo.Context, params ListKindsParams) error
	// Create New Kind
	// (POST /kinds)
	CreateKind(ctx echo.Context) error
	// Delete Kind by ID
	// (DELETE /kinds/{id})
	DeleteKind(ctx echo.Context, id openapi_types.UUID) error
	// Get Kind by ID
	// (GET /kinds/{id})
	GetKind(ctx echo.Context, id openapi_types.UUID) error
	// Change Kind Description
	// (POST /kinds/{id}/changeDescription)
	ChangeKindDescription(ctx echo.Context, id openapi_types.UUID) error
	// Change Kind Name
	// (POST /kinds/{id}/changeName)
	ChangeKindName(ctx echo.Context, id openapi_types.UUID) error
	// Make Kind Draft
	// (POST /kinds/{id}/makeDraft)
	MakeKindDraft(ctx echo.Context, id openapi_types.UUID) error
	// Make Kind Published
	// (POST /kinds/{id}/makePublished)
	MakeKindPublished(ctx echo.Context, id openapi_types.UUID) error
	// List Launches
	// (GET /launches)
	ListLaunches(ctx echo.Context, params ListLaunchesParams) error
	// Create New Launch
	// (POST /launches)
	CreateLaunch(ctx echo.Context) error
	// Delete Launch by ID
	// (DELETE /launches/{id})
	DeleteLaunch(ctx echo.Context, id openapi_types.UUID) error
	// Get Launch by ID
	// (GET /launches/{id})
	GetLaunch(ctx echo.Context, id openapi_types.UUID) error
	// Change Launch Description
	// (POST /launches/{id}/changeDescription)
	ChangeLaunchDescription(ctx echo.Context, id openapi_types.UUID) error
	// Change Launch Name
	// (POST /launches/{id}/changeName)
	ChangeLaunchName(ctx echo.Context, id openapi_types.UUID) error
	// Make Launch Draft
	// (POST /launches/{id}/makeDraft)
	MakeLaunchDraft(ctx echo.Context, id openapi_types.UUID) error
	// Make Launch Published
	// (POST /launches/{id}/makePublished)
	MakeLaunchPublished(ctx echo.Context, id openapi_types.UUID) error
	// List Orders
	// (GET /orders)
	ListOrders(ctx echo.Context, params ListOrdersParams) error
	// Create New Order
	// (POST /orders)
	CreateOrder(ctx echo.Context) error
	// Delete Order by ID
	// (DELETE /orders/{id})
	DeleteOrder(ctx echo.Context, id openapi_types.UUID) error
	// Get Order by ID
	// (GET /orders/{id})
	GetOrder(ctx echo.Context, id openapi_types.UUID) error
	// Change Order Description
	// (POST /orders/{id}/changeDescription)
	ChangeOrderDescription(ctx echo.Context, id openapi_types.UUID) error
	// Change Order Name
	// (POST /orders/{id}/changeName)
	ChangeOrderName(ctx echo.Context, id openapi_types.UUID) error
	// Make Order Draft
	// (POST /orders/{id}/makeDraft)
	MakeOrderDraft(ctx echo.Context, id openapi_types.UUID) error
	// Make Order Published
	// (POST /orders/{id}/makePublished)
	MakeOrderPublished(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListKinds converts echo context to params.
func (w *ServerInterfaceWrapper) ListKinds(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListKindsParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKinds(ctx, params)
	return err
}

// CreateKind converts echo context to params.
func (w *ServerInterfaceWrapper) CreateKind(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateKind(ctx)
	return err
}

// DeleteKind converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKind(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteKind(ctx, id)
	return err
}

// GetKind converts echo context to params.
func (w *ServerInterfaceWrapper) GetKind(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetKind(ctx, id)
	return err
}

// ChangeKindDescription converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeKindDescription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeKindDescription(ctx, id)
	return err
}

// ChangeKindName converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeKindName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeKindName(ctx, id)
	return err
}

// MakeKindDraft converts echo context to params.
func (w *ServerInterfaceWrapper) MakeKindDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeKindDraft(ctx, id)
	return err
}

// MakeKindPublished converts echo context to params.
func (w *ServerInterfaceWrapper) MakeKindPublished(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeKindPublished(ctx, id)
	return err
}

// ListLaunches converts echo context to params.
func (w *ServerInterfaceWrapper) ListLaunches(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListLaunchesParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListLaunches(ctx, params)
	return err
}

// CreateLaunch converts echo context to params.
func (w *ServerInterfaceWrapper) CreateLaunch(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateLaunch(ctx)
	return err
}

// DeleteLaunch converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLaunch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLaunch(ctx, id)
	return err
}

// GetLaunch converts echo context to params.
func (w *ServerInterfaceWrapper) GetLaunch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLaunch(ctx, id)
	return err
}

// ChangeLaunchDescription converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeLaunchDescription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeLaunchDescription(ctx, id)
	return err
}

// ChangeLaunchName converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeLaunchName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeLaunchName(ctx, id)
	return err
}

// MakeLaunchDraft converts echo context to params.
func (w *ServerInterfaceWrapper) MakeLaunchDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeLaunchDraft(ctx, id)
	return err
}

// MakeLaunchPublished converts echo context to params.
func (w *ServerInterfaceWrapper) MakeLaunchPublished(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeLaunchPublished(ctx, id)
	return err
}

// ListOrders converts echo context to params.
func (w *ServerInterfaceWrapper) ListOrders(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOrdersParams
	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", ctx.QueryParams(), &params.Cursor)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cursor: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter status: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOrders(ctx, params)
	return err
}

// CreateOrder converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrder(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateOrder(ctx)
	return err
}

// DeleteOrder converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOrder(ctx, id)
	return err
}

// GetOrder converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOrder(ctx, id)
	return err
}

// ChangeOrderDescription converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeOrderDescription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeOrderDescription(ctx, id)
	return err
}

// ChangeOrderName converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeOrderName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ChangeOrderName(ctx, id)
	return err
}

// MakeOrderDraft converts echo context to params.
func (w *ServerInterfaceWrapper) MakeOrderDraft(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeOrderDraft(ctx, id)
	return err
}

// MakeOrderPublished converts echo context to params.
func (w *ServerInterfaceWrapper) MakeOrderPublished(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MakeOrderPublished(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/kinds", wrapper.ListKinds)
	router.POST(baseURL+"/kinds", wrapper.CreateKind)
	router.DELETE(baseURL+"/kinds/:id", wrapper.DeleteKind)
	router.GET(baseURL+"/kinds/:id", wrapper.GetKind)
	router.POST(baseURL+"/kinds/:id/changeDescription", wrapper.ChangeKindDescription)
	router.POST(baseURL+"/kinds/:id/changeName", wrapper.ChangeKindName)
	router.POST(baseURL+"/kinds/:id/makeDraft", wrapper.MakeKindDraft)
	router.POST(baseURL+"/kinds/:id/makePublished", wrapper.MakeKindPublished)
	router.GET(baseURL+"/launches", wrapper.ListLaunches)
	router.POST(baseURL+"/launches", wrapper.CreateLaunch)
	router.DELETE(baseURL+"/launches/:id", wrapper.DeleteLaunch)
	router.GET(baseURL+"/launches/:id", wrapper.GetLaunch)
	router.POST(baseURL+"/launches/:id/changeDescription", wrapper.ChangeLaunchDescription)
	router.POST(baseURL+"/launches/:id/changeName", wrapper.ChangeLaunchName)
	router.POST(baseURL+"/launches/:id/makeDraft", wrapper.MakeLaunchDraft)
	router.POST(baseURL+"/launches/:id/makePublished", wrapper.MakeLaunchPublished)
	router.GET(baseURL+"/orders", wrapper.ListOrders)
	router.POST(baseURL+"/orders", wrapper.CreateOrder)
	router.DELETE(baseURL+"/orders/:id", wrapper.DeleteOrder)
	router.GET(baseURL+"/orders/:id", wrapper.GetOrder)
	router.POST(baseURL+"/orders/:id/changeDescription", wrapper.ChangeOrderDescription)
	router.POST(baseURL+"/orders/:id/changeName", wrapper.ChangeOrderName)
	router.POST(baseURL+"/orders/:id/makeDraft", wrapper.MakeOrderDraft)
	router.POST(baseURL+"/orders/:id/makePublished", wrapper.MakeOrderPublished)

}
